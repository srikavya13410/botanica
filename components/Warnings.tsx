import React, { useState, useEffect, useCallback } from 'react';
import { User, UnsafePlant } from '../types';
import * as geminiService from '../services/geminiService';
import Spinner from './common/Spinner';

interface WarningsProps {
  user: User;
}

const Warnings: React.FC<WarningsProps> = ({ user }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedQuery, setDebouncedQuery] = useState('');
  const [unsafePlants, setUnsafePlants] = useState<UnsafePlant[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Debounce search input
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 500); // 500ms delay

    return () => {
      clearTimeout(handler);
    };
  }, [searchQuery]);

  const fetchWarnings = useCallback(async (query: string) => {
    setIsLoading(true);
    setError(null);
    try {
      const plants = await geminiService.getUnsafePlants(user.medicalCondition, query);
      setUnsafePlants(plants);
    } catch (err) {
      console.error(err);
      setError('Could not fetch plant warnings. Please try again later.');
    } finally {
      setIsLoading(false);
    }
  }, [user.medicalCondition]);
  
  // Fetch warnings when component mounts or debounced query changes
  useEffect(() => {
    fetchWarnings(debouncedQuery);
  }, [debouncedQuery, fetchWarnings]);

  return (
    <div className="p-4 space-y-6">
      <h2 className="text-3xl font-bold text-brand-brown">Plant Warnings</h2>
      <div className="bg-yellow-100 border-l-4 border-brand-yellow text-yellow-800 p-4 rounded-lg shadow-sm">
        <p className="font-bold">Important Disclaimer</p>
        <p className="text-sm">This information is generated by AI and is for educational purposes only. It is not a substitute for professional medical advice. Always consult with a healthcare provider or a qualified botanist before handling or consuming any new plant.</p>
      </div>
      
      <div className="sticky top-[72px] bg-brand-cream py-2 z-10">
        <p className="text-brand-brown mb-2">Showing warnings for: <strong className="font-semibold">{user.medicalCondition || 'General'}</strong></p>
        <input
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search for a specific plant..."
          className="w-full px-4 py-3 border-2 border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-brand-light-green"
          aria-label="Search for unsafe plants"
        />
      </div>

      <div>
        {isLoading ? (
          <div className="flex justify-center pt-10"><Spinner /></div>
        ) : error ? (
          <p className="text-red-500 text-center py-10">{error}</p>
        ) : unsafePlants.length > 0 ? (
          <div className="space-y-4">
            {unsafePlants.map((plant, index) => (
              <div key={index} className="bg-white p-5 rounded-lg shadow-md border-l-4 border-red-500 animate-fade-in">
                <h3 className="text-xl font-bold text-red-700">{plant.name}</h3>
                {plant.commonNames && plant.commonNames.length > 0 && (
                   <p className="text-sm text-gray-500 italic mb-2">Also known as: {plant.commonNames.join(', ')}</p>
                )}
                <p className="text-brand-brown mt-2"><strong className="font-semibold">Reason to Avoid:</strong> {plant.reason}</p>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center text-gray-500 py-10 px-4 bg-gray-50 rounded-lg">
            <p>No specific warnings found for your search criteria.</p>
            <p className="text-sm mt-1">Remember to always exercise caution with unknown plants.</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Warnings;
